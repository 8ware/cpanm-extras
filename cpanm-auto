#! /usr/bin/env perl

use strict;
use warnings;

use feature 'say';

use Getopt::Long;

GetOptions('dryrun' => \our $DRYRUN);

=head1 NAME

cpanm-aure - resolves non-perl dependencies automatically

=head1 SYNOPSIS

  $ cpanm <module> [...]

  # if failed
  $ cpanm-aure && !!

=cut

# TODO distinguish between search_file and search_devlib

package App::cpanminus::AutoResolution;

sub resolve($);
sub read_log($);
sub select($);
sub filter($%);
sub disambiguate($%);

my %SOLUTIONS = (
	#
#	# resolve XML::LibXSLT dependencies to libxslt and libxml2
	# resolve XML::LibXSLT dependencies to libxslt
	# ENCOUNTERED: XML::LibXSLT
	#
#	qr/Or get (?<lib1>libxslt) and (?<lib2>libxml2)/ => sub {
	qr/Or get (?<lib>libxslt)/ => sub {
		my ($lineno, $line, $packages, %data) = @_;

#		return determine("$data{lib1}-dev", $packages)
#				and determine("$data{lib2}-dev", $packages);
		return determine_devlib($data{lib}, $packages);
	},

	#
	# resolve XML::LibXML dependency to libxml2
	# ENCOUNTERED: XML::LibXML
	#
	qr/Or get (?<lib>libxml2)/ => sub {
		my ($lineno, $line, $packages, %data) = @_;

		return determine_devlib($data{lib}, $packages);
	},

	#
	# to resolve dependencies to shared libraries automatically
	# SEE ALSO: ld manpage, -l option
	# ENCOUNTERED: XML::LibXSLT
	#
	qr/\/usr\/bin\/ld: cannot find -l(?<lib>.+)/ => sub {
		my ($lineno, $line, $packages, %data) = @_;

		return determine_devlib("lib$data{lib}", $packages);
	},

	#
	# resolve dependencies which are specified by required files,
	# e.g. executables
	# ENCOUNTERED: App::Framework::Feature::Sql
	#
	qr/Can't exec "(?<cmd>.+)": No such file/ => sub {
		my ($lineno, $line, $packages, %data) = @_;

		return determine_file($data{cmd}, $packages);
	},

	#
	# calls attention for optional modules
	# ENCOUNTERED: App::Framework
	#
	qr/Enter your choices, separated by spaces \(0=none, a=all\): \[a\] a/ => sub {
		my ($lineno, $line, $packages, %data) = @_;

		say "it seems that the module has asked to choose some optional modules.";
		say "since cpanm chooses 'all' by default you could run cpanm in interactive";
		say "mode by using the '--interactive' option. see line $lineno and above";
		say "for more information.";
	},
);


package main;

my $log = $ARGV[0] && -f $ARGV[0] ? shift : "$ENV{HOME}/.cpanm/build.log";
unless (@ARGV) {
	my ($status, @packages) = App::cpanminus::AutoResolution->resolve($log);

	exit 1 unless $status;
	exit Apt::Get->install(@packages);
}


sub cpanm(@) {
	open CPANM, "cpanm @_ 2>&1 |" or die "cannot fork cpanm: $!";
	while (<CPANM>) {
		print;
		chomp;
		next unless /^! Configure failed for (.+)\. See (.+\/build\.log)/;

		my ($module, $buildlog) = ($1, $2);
		say "--> Trying to resolve $module automatically";
		App::cpanminus::AutoResolution->resolve($buildlog);
	}
	close CPANM or warn "cannot close cpanm: $!";
}

#cpanm(@ARGV);


package App::cpanminus::AutoResolution;

use Text::Levenshtein 'distance';
use List::MoreUtils 'uniq';

sub resolve($) {
	shift if $_[0] eq __PACKAGE__;
	my $buildlog = shift;

	my $status = 1;
	my $lineno = 1;
	my %packages;
	for (read_log($buildlog)) {
		while (my ($indicator, $solution) = each %SOLUTIONS) {
			$status &= $solution->($lineno, $_, \%packages, %+) if /$indicator/;
		}
		$lineno++;
	}

	return $status, uniq(values %packages);
}

sub read_log($) {
	my $buildlog = shift;

	open LOG, '<', $buildlog or die "cannot open $buildlog: $!";
	my @lines = <LOG>;
	close LOG or warn "cannot close $buildlog: $!";
	
	return @lines;
}

sub determine_file($$) {
	my $file = shift;
	my $packages = shift;

	return 1 if defined $packages->{$file};

	say "  > Searching for $file";
	my $obj = create_obj($file, $packages);
	my $package = search_libs($obj);
	
	unless ($package) {
		say "  > NOTHING FOUND";
		return 0;
	}

	$packages->{$file} = $package;
	return 1;
}

sub determine_devlib($$) {
	my $lib = shift;
	my $packages = shift;

	return 1 if defined $packages->{$lib};

	say "  > Searching for $lib";

	my $obj = create_obj($lib, $packages);
	my $package = search_pkgs($obj);
	$package = search_libs($obj) unless $package;
	
	unless ($package) {
		say "  > NOTHING FOUND";
		return 0;
	}

	$packages->{$lib} = $package;
	return 1;
}

sub create_obj($$) {
	my $lib = shift;
	my $pkgs = shift;

	return { lib => $lib, pkg => "$lib-dev", pkgs => $pkgs };
}

sub search_pkgs($) {
	my $obj = shift;

	return search($obj, map { $_ => [] } Apt::Cache->search($obj->{pkg}));
}

sub search_libs($) {
	my $obj = shift;

	return search($obj, Apt::File->find($obj->{lib}));
}

sub search($%) {
	my $obj = shift;
	my %matches = @_;

	%matches = filter(qr/-dev$/, %matches);

	return keys %matches ? disambiguate($obj, %matches) : undef;
}

sub filter($%) {
	my $regex = shift;
	my %hash = @_;

	my %filtered;
	while (my ($key, $value) = each %hash) {
		$filtered{$key} = $value if $key =~ /$regex/;
	}

	return %filtered;
}

sub disambiguate($%) {
	my $obj = shift;
	my %matches = @_;

	my $lib = $obj->{lib};
	my $pkg = $obj->{pkg};
	my @packages = values %{$obj->{pkgs}};
	my @matches = keys %matches;

	return shift @matches if @matches == 1;

	say "  > Disambiguate: @matches";

	my $most_similar = "";
	for (@matches) {
		if ($_ eq $lib or $_ eq $pkg) {
			$most_similar = $_;
			last;
		} elsif (matches($lib, $matches{$_}) or $_ ~~ @packages
				or distance($_, $pkg) < distance($most_similar, $pkg)
				or length $lib == length and length $most_similar > length
				or length $lib < length and length $most_similar > length) {
			$most_similar = $_;
		}
	}

	return $most_similar;
}

sub matches($$) {
	my $string = shift;
	my @values = @{(shift)};

	for (@values) {
		return 1 if $string =~ /$_(\.(a|so))?$/;
	}

	return 0;
}


package Apt::Cache;

sub search($) {
	shift if $_[0] eq __PACKAGE__;
	my $pattern = shift;

	my @packages;
	for (split /\n/, `apt-cache search --names-only $pattern`) {
		chomp; # XXX is this really necessary due to split /\n/?
		push @packages, s/\s+-\s+.+//r;
	}

	return @packages;
}


package Apt::File;

sub find($) {
	shift if $_[0] eq __PACKAGE__;
	my $pattern = shift;

	my %results;
	for (split /\n/, `apt-file find $pattern`) {
		chomp; # XXX is this really necessary due to split /\n/?
		my ($package, $file) = /([^:]+):\s+.+\/(.+)/;
		$results{$package} = [] unless defined $results{$package};
		push $results{$package}, $file;
	}

	return %results;
}


package Apt::Get;

sub install(@) {
	shift if $_[0] eq __PACKAGE__;
	my @packages = @_;

	return 1 unless @packages;

	say join "\n  ", "--> following packages were installed:", @packages;
	return $main::DRYRUN ? 0 : system "sudo apt-get install @packages";
}

